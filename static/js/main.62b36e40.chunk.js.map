{"version":3,"sources":["Context.js","EmployeesBlocksList.js","EmployeesBirthday.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","EmployeesList","letter","fullList","useContext","employeesList","list","item","lastName","toUpperCase","push","sort","a","b","aItem","toLowerCase","firstName","bItem","localeCompare","getEmployeesList","length","map","employee","Employee","data","id","props","checkedIdsList","toggleEmployee","className","type","checked","indexOf","onChange","EmployeesSection","EmployeesBlocksList","letters","split","listMonthes","EmployeesBirthdayList","employees","showDob","dob","date","Date","getDate","getMonth","getFullYear","MonthSection","month","EmployeesBirthday","checkedEmployeeList","listUsedMonthes","filter","listByMonthes","addCheckedEmployee","checkedList","setFullYear","App","useState","setFullList","setCheckedIdsList","setCheckedEmployeeList","useEffect","fetch","then","result","json","catch","error","console","log","Promise","resolve","reject","localStorage","JSON","parse","forEach","updateCheckedEmployees","stringify","saveCheckedIds","Provider","value","itemId","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62b36e40.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const Context = React.createContext();\r\n","import React, { useContext } from \"react\";\r\nimport { Context } from \"./Context\";\r\n\r\nfunction EmployeesList({ letter }) {\r\n  const { fullList } = useContext(Context);\r\n  const getEmployeesList = (letter) => {\r\n    const list = [];\r\n    for (let item of fullList) {\r\n      if (item.lastName[0].toUpperCase() === letter) {\r\n        list.push(item);\r\n      }\r\n    }\r\n    list.sort((a, b) => {\r\n      const aItem = a.lastName.toLowerCase() + a.firstName.toLowerCase();\r\n      const bItem = b.lastName.toLowerCase() + b.firstName.toLowerCase();\r\n      return aItem.localeCompare(bItem);\r\n    });\r\n\r\n    return list;\r\n  };\r\n\r\n  const employeesList = getEmployeesList(letter);\r\n\r\n  return (\r\n    <div>\r\n      {employeesList.length\r\n        ? employeesList.map((employee) => (\r\n            <Employee data={employee} key={employee.id} />\r\n          ))\r\n        : \"----------\"}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Employee(props) {\r\n  const { checkedIdsList, toggleEmployee } = useContext(Context);\r\n\r\n  return (\r\n    <label className=\"employee\">\r\n      {props.data.lastName} {props.data.firstName}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={checkedIdsList.indexOf(props.data.id) !== -1}\r\n        onChange={() => toggleEmployee(props.data.id)}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nfunction EmployeesSection({ letter }) {\r\n  return (\r\n    <div className=\"employeesListItem\">\r\n      <h2>{letter}</h2>\r\n      <EmployeesList letter={letter} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction EmployeesBlocksList() {\r\n  const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n    .split(\"\")\r\n    .map((letter) => <EmployeesSection letter={letter} key={letter} />);\r\n\r\n  return (\r\n    <div className=\"employeesList\">\r\n      <h1>Employees</h1>\r\n      <div>{letters}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeesBlocksList;\r\n","import React, { useContext } from \"react\";\r\nimport { Context } from \"./Context\";\r\nconst listMonthes = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nfunction EmployeesBirthdayList({ employees }) {\r\n  return (\r\n    <ul>\r\n      {employees.map((employee) => (\r\n        <Employee data={employee} key={employee.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction showDob(dob) {\r\n  const date = new Date(dob);\r\n  return `${date.getDate()} ${\r\n    listMonthes[date.getMonth()]\r\n  } ${date.getFullYear()} year`;\r\n}\r\n\r\nfunction Employee(props) {\r\n  return (\r\n    <li className=\"birthRecord\">\r\n      {props.data.lastName} {props.data.firstName} - {showDob(props.data.dob)}\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction MonthSection({ month, employees }) {\r\n  return (\r\n    <div className=\"birthdayMonth\">\r\n      <h4>{month}</h4>\r\n      <div>\r\n        <EmployeesBirthdayList month={month} employees={employees} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction EmployeesBirthday() {\r\n  const { checkedEmployeeList } = useContext(Context);\r\n  const listUsedMonthes = listMonthes.filter(\r\n    (month) => checkedEmployeeList[month]\r\n  );\r\n  const listByMonthes = listUsedMonthes.map((month) => (\r\n    <MonthSection\r\n      month={month}\r\n      key={month}\r\n      employees={checkedEmployeeList[month]}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"employeesBirth\">\r\n      <h2> Employees birthday </h2>\r\n      <div>\r\n        {listUsedMonthes.length ? (\r\n          listByMonthes\r\n        ) : (\r\n          <div className=\"noEmployee\">'No selected employees'</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeesBirthday;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport EmployeesBlocksList from \"./EmployeesBlocksList\";\nimport EmployeesBirthday from \"./EmployeesBirthday\";\nimport { Context } from \"./Context\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nconst URL = \"https://yalantis-react-school-api.yalantis.com/api/task0/users\";\n\nfunction requestFullList() {\n  return fetch(URL)\n    .then((result) => result.json())\n    .catch((error) => {\n      console.log(\"Fetch of employees failed: \", error);\n    });\n}\n\nfunction requestCheckedIds() {\n  return new Promise((resolve, reject) => {\n    resolve(localStorage.employees ? JSON.parse(localStorage.employees) : []);\n  });\n}\n\nfunction saveCheckedIds(checkedIdsList) {\n  localStorage.employees = JSON.stringify(checkedIdsList);\n}\n\nfunction updateCheckedEmployees(fullList, checkedIdsList) {\n  let checkedEmployeeList = {};\n  fullList.forEach((employee) => {\n    if (checkedIdsList.indexOf(employee.id) !== -1) {\n      checkedEmployeeList = addCheckedEmployee(employee, checkedEmployeeList);\n    }\n  });\n  return checkedEmployeeList;\n}\n\nconst addCheckedEmployee = (employee, list) => {\n  const monthId = new Date(employee.dob).getMonth();\n  const month = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ][monthId];\n  const checkedList = list;\n  checkedList[month] = checkedList[month] || [];\n  checkedList[month].push({ ...employee });\n  checkedList[month].sort(\n    (a, b) =>\n      new Date(a.dob).setFullYear(2000) - new Date(b.dob).setFullYear(2000)\n  );\n  return checkedList;\n};\n\nfunction App() {\n  const [fullList, setFullList] = useState([]);\n  const [checkedIdsList, setCheckedIdsList] = useState([]);\n  const [checkedEmployeeList, setCheckedEmployeeList] = useState({});\n\n  function toggleEmployee(id) {\n    if (checkedIdsList.indexOf(id) === -1) {\n      setCheckedIdsList([...checkedIdsList, id]);\n    } else {\n      setCheckedIdsList([...checkedIdsList].filter((itemId) => itemId !== id));\n    }\n  }\n\n  useEffect(() => {\n    requestFullList().then((fullList) => {\n      setFullList([...fullList]);\n    });\n    requestCheckedIds().then((checkedIdsList) => {\n      setCheckedIdsList([...checkedIdsList]);\n    });\n  }, []);\n\n  useEffect(() => {\n    const checkedEmployeeList = updateCheckedEmployees(\n      fullList,\n      checkedIdsList\n    );\n    saveCheckedIds(checkedIdsList);\n    setCheckedEmployeeList({ ...checkedEmployeeList });\n  }, [fullList, checkedIdsList]);\n\n  return (\n    <Context.Provider\n      value={{\n        fullList,\n        checkedIdsList,\n        checkedEmployeeList,\n        toggleEmployee,\n      }}\n    >\n      <Router>\n        <Switch>\n          <Route path=\"/TestTask/employees\">\n            <div className=\"App\">\n              <EmployeesBlocksList />\n              <EmployeesBirthday />\n            </div>\n          </Route>\n          <Route path=\"*\">\n            go to the <Link to=\"./employees\">Employees Page</Link>\n          </Route>\n        </Switch>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}